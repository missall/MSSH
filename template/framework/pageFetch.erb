package cn.<%=@@projectName%>.framework;

import java.util.List;

/**
 * 用于分页的类
 * 
 * @description 可以用于传递查询的结果也可以用于传送查询的参数
 * 
 * 
 */
public class PageFetch<T> {

    public final static int PAGESIZE = 10;

    private int pageSize = PAGESIZE;

    private List<T> items;

    private int totalCount;

    private String totalAmount;
    private String cpage;
    private String total;

    private int[] indexes = new int[0];

    private int startIndex = 0;

    public String getCpage() {
        return cpage;
    }

    public void setCpage(String cpage) {
        this.cpage = cpage;
    }

    public String getTotal() {
        return total;
    }

    public void setTotal(String total) {
        this.total = total;
    }

    public PageFetch(List<T> items, int totalCount) {
        setPageSize(PAGESIZE);
        setTotalCount(totalCount);
        setItems(items);
        setStartIndex(0);
    }
    
    public PageFetch(List<T> items) {
        setPageSize(PAGESIZE);
        setTotalCount(totalCount);
        setItems(items);
        setStartIndex(0);
    }

    public PageFetch(List<T> items, String cpage) {
        setPageSize(PAGESIZE);
        setTotalCount(totalCount);
        setItems(items);
        setStartIndex((Integer.parseInt(cpage)-1)*PAGESIZE);
    }

    public PageFetch(List<T> items, int totalCount, int startIndex) {
        setPageSize(PAGESIZE);
        setTotalCount(totalCount);
        setItems(items);
        setStartIndex(startIndex);
    }

    public PageFetch(List<T> items, int totalCount, int pageSize, int startIndex) {
        setPageSize(pageSize);
        setTotalCount(totalCount);
        setItems(items);
        setStartIndex(startIndex);
		setCpage(String.valueOf((startIndex / pageSize) + 1));
		setTotal(String.valueOf((totalCount + pageSize - 1) / pageSize));
    }

    public PageFetch(List<T> items, int totalCount, int pageSize,
            int startIndex, String totalAmount) {
        setPageSize(pageSize);
        setTotalCount(totalCount);
        setItems(items);
        setStartIndex(startIndex);
        setTotalAmount(totalAmount);
    }

    public List<T> getItems() {
        return this.items;
    }

    public void setItems(List<T> items) {
        this.items = items;
    }

    public int getPageSize() {
        return this.pageSize;
    }

    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }

    public void setTotalAmount(String totalAmount) {
        this.totalAmount = totalAmount;
    }

    public String getTotalAmount() {
        return this.totalAmount;
    }

    public int getTotalCount() {
        return this.totalCount;
    }

    public void setTotalCount(int totalCount) {
        if (totalCount > 0) {
            this.totalCount = totalCount;
            int count = totalCount / this.pageSize;
            if (totalCount % this.pageSize > 0) {
                count++;
            }
            this.indexes = new int[count];
            for (int i = 0; i < count; i++) {
                this.indexes[i] = this.pageSize * i;
            }
        } else {
            this.totalCount = 0;
        }
    }

    public int[] getIndexes() {
        return this.indexes;
    }

    public void setIndexes(int[] indexes) {
        this.indexes = indexes;
    }

    public int getStartIndex() {
        return this.startIndex;
    }

    public void setStartIndex(int startIndex) {
/*        if (this.totalCount <= 0) {
            this.startIndex = 0;
        } else if (startIndex >= this.totalCount) {
            this.startIndex = this.indexes[this.indexes.length - 1];
        } else if (startIndex < 0) {
            this.startIndex = 0;
        } else {
            this.startIndex = this.indexes[startIndex / this.pageSize];
        }*/
        this.startIndex = startIndex;
    }

    /**
     * 返回下一页起始条数
     * 
     * @return
     */
    public int getNextIndex() {
        int nextIndex = getStartIndex() + this.pageSize;
        if (nextIndex >= this.totalCount) {
            return getStartIndex();
        } else {
            return nextIndex;
        }
    }

    /**
     * 返回当前条数
     * 
     * @return
     */
    public int getCurrentIndex() {
        return this.startIndex + 1;
    }

    /**
     * 返回当前页码
     * 
     * @return
     */
    public int getCurrentPage() {
        return this.startIndex / this.pageSize + 1;
    }

    /**
     * 返回上一页起始条数
     * 
     * @return
     */
    public int getPreviousIndex() {
        int previousIndex = getStartIndex() - this.pageSize;
        if (previousIndex < 0) {
            return 0;
        } else {
            return previousIndex;
        }
    }

    /**
     * 返回最后一页起始条数
     * 
     * @return
     */
    public int getLastPageIndex() {
        int lastPageIndex = (getTotalIndex() - 1) * this.pageSize;
        if (lastPageIndex >= this.totalCount) {
            return getStartIndex();
        } else {
            return lastPageIndex;
        }
    }

    /**
     * 返回总页数
     * 
     * @return
     */
    public int getTotalIndex() {
        return this.indexes.length;
    }

    /**
     * 是否可以点击第一页
     */
    public boolean isEnbleFirstPage() {
        return getCurrentPage() > 1;
    }

    /**
     * 是否可以点击最后一页
     */
    public boolean isEnbleLastPage() {
        return getCurrentPage() < getTotalIndex();
    }

    /**
     * 是否可以点击下一页
     */
    public boolean isEnbleNextPage() {
        return getCurrentPage() < getTotalIndex();
    }

    /**
     * 是否可以点击前一页
     */
    public boolean isEnbleFormerPage() {
        return getCurrentPage() > 1;
    }
}
