/*
 * Copyright (C) 2015  
 *
 * 本系统是商用软件,未经授权擅自复制或传播本程序的部分或全部将是非法的.
 *
 * @since 2015-6-18
 * @author Joe
 * @version 1.0.0
 */
package dao;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import util.BaseTestCase;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.DetachedCriteria;
import cn.<%=@@projectName%>.framework.PageFetch;
import cn.<%=@@projectName%>.model.<%=@@bean.table_name%>;
import cn.<%=@@projectName%>.dao.<%=@@bean.table_name%>Dao;

/**
 * <%=@@bean.table_name%> Dao Test
 * 
 */

public class <%=@@bean.table_name%>DaoTest extends BaseTestCase{

    private <%=@@bean.table_name%>Dao <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao;
    private static Long <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id = 99999L;

    /**
     * 测试新增<%=@@bean.table_name%>
     */
    public void testAdd<%=@@bean.table_name%>() {
        try {
             <%=@@bean.table_name%> <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%> = new <%=@@bean.table_name%>();
             <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>.setCreatedBy(1L);
             <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>.setDateCreated(new Date());
             <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.add<%=@@bean.table_name%>(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>);
             <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>.get<%=@@bean.table_name%>Id();
         } catch (Exception be) {
             be.printStackTrace();
             assertTrue(false);
         }    
    }


    /**
     * 测试更新<%=@@bean.table_name%>
     */
    public void testUpdate<%=@@bean.table_name%>() {
        try {
             <%=@@bean.table_name%> <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%> = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.find<%=@@bean.table_name%>ById(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id);
             <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>.setDateModified(new Date());
             <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.update<%=@@bean.table_name%>(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>);
         } catch (Exception be) {
             be.printStackTrace();
             assertTrue(false);
         }
    }

    /**
     * 测试通过Id查找<%=@@bean.table_name%>
     * 
     */
    public void testFind<%=@@bean.table_name%>ById() {
             try {
              <%=@@bean.table_name%> <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%> = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.find<%=@@bean.table_name%>ById(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id);
              assertNotNull(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>);
          } catch (Exception be) {
              be.printStackTrace();
              assertTrue(false);
          }
    }

    /**
     * 测试返回<%=@@bean.table_name%>列表
     */
    public void testSearch<%=@@bean.table_name%>() {
         try {
              PageFetch pf = new PageFetch(new ArrayList(), 10, 0);
              DetachedCriteria dc = DetachedCriteria.forClass(<%=@@bean.table_name%>.class);
              dc.add(Restrictions.idEq(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id));
              pf = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.search<%=@@bean.table_name%>(dc, pf);
              assertTrue(pf.getItems().size() > 0);
          } catch (Exception be) {
              be.printStackTrace();
              assertTrue(false);
          }
    }


    /**
     * 测试返回全部<%=@@bean.table_name%>列表
     */
    public void testGet<%=@@bean.table_name%>List() {
         try {
             DetachedCriteria dc = DetachedCriteria.forClass(<%=@@bean.table_name%>.class);
             dc.add(Restrictions.eq("<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id", <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id));
             List l = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.get<%=@@bean.table_name%>List(dc);
             <%=@@bean.table_name%> o = (<%=@@bean.table_name%>) l.get(0);
             System.out.println(o.get<%=@@bean.table_name%>Id());
             assertNotNull(l);
         } catch (Exception be) {
             be.printStackTrace();
             assertTrue(false);
         }    
    }

    /**
     * 测试删除<%=@@bean.table_name%>
     */
    public void testDelete<%=@@bean.table_name%>() {
         try {
             <%=@@bean.table_name%> <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%> = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.find<%=@@bean.table_name%>ById(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id);
            <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.delete<%=@@bean.table_name%>(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>);
            <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%> = <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao.find<%=@@bean.table_name%>ById(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Id);
             assertNull(<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>);
         } catch (Exception be) {
             be.printStackTrace();
             assertTrue(false);
         }
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        <%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao = (<%=@@bean.table_name%>Dao) bf.getBean("<%=@@bean.table_name[0].downcase<<@@bean.table_name[1,@@bean.table_name.length]%>Dao");
    }

}
